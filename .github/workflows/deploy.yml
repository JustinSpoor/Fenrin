name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main
    paths:
      - 'fenrin_frontend/**'
      - 'fenrin_backend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers to speed up the build process
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{runner.os}}-buildx-${{github.sha}}
          restore-keys: |
            ${{runner.os}}-buildx-

      # Build and push frontend Docker image
      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t ${{secrets.DOCKER_USERNAME}}/angular-frontend ./fenrin_frontend
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
          docker push ${{ secrets.DOCKER_USERNAME }}/angular-frontend

      # Build and push backend Docker image
      - name: Build and Push Backend Docker Image
        run: |
          docker build -t ${{secrets.DOCKER_USERNAME}}/spring-boot-backend ./fenrin_backend
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
          docker push ${{secrets.DOCKER_USERNAME}}/spring-boot-backend

      - name: Setup SSH key
        run: | 
          echo "${{ secrets.VPS_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      # Deploy to VPS using SSH
      - name: SSH to VPS and Deploy
#        uses: appleboy/ssh-action@v0.1.0
#        with:
#          host: ${{ secrets.VPS_HOST }}
#          username: root
#          key: |
#            ${{ secrets.VPS_SSH_KEY }}
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}
          mkdir -p /home/fenrin/fenrin-app
          cd /home/fenrin/fenrin-app
          docker pull ${{secrets.DOCKER_USERNAME}}/angular-frontend
          docker pull ${{secrets.DOCKER_USERNAME}}/spring-boot-backend
          docker-compose down
          docker-compose up -d